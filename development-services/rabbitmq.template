AWSTemplateFormatVersion: 2010-09-09
Description: rabbitmq
Metadata:
  DefaultName: rabbktmq
  Dependencies:
    - TemplatePath: networking/vpc
      Resources:
        ElbSg: ElbSecGroup
        HttpSg: HttpNsSecGroup
    - TemplatePath: networking/elb-subnets
      Parameters:
        VpcId: VpcId
      Outputs:
        ServerSubnets: WebServerSubnets
        ElbSubnets: ElbSubnets
      NestedDependency: networking/vpc
    - TemplatePath: analytics/logs-store
      Resources:
        CwlPolicy: LinuxLogPolicy
      Outputs:
        CwlLinuxParams: LxDockerLogParams
        CwlDockerParams: DockerCwlParams
Parameters:
  VpcId:
    Description: 'VPCid associated with the subnets. [nat-subnets.parameters.VpcId]'
    Type: 'AWS::EC2::VPC::Id'
  ServerSubnets:
    Description: 'VPCid associated with the subnets. [elb-subnets.outputs.WebServerSubnets]'
    Type: 'List<AWS::EC2::Subnet::Id>'
  ElbSubnets:
    Description: 'VPCid associated with the subnets. [elb-subnets.outputs.ElbSubnets]'
    Type: 'List<AWS::EC2::Subnet::Id>'
  ElbSg:
    Description: 'Elb Security Group. [vpc.resources.ElbSecGroup]'
    Type: String
  HttpSg:
    Description: 'Elb Target Security Group. [vpc.resources.HttpNsSecGroup]'
    Type: String
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: String
    Default: ''
  BcUbuntuBaseAmiId:
    Description: AMI to use. Note Ubuntu is prefered.
    Type: 'AWS::EC2::Image::Id'
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
  MinCount:
    Description: ''
    Type: String
    Default: 1
  MaxCount:
    Description: ''
    Type: String
    Default: 2 
  DesiredSize:
    Default: 1
    MinValue: 1
    MaxValue: 9
    Description: Number of nodes (1-9).
    Type: Number
  VolumeSize:
    Description: Volume size for each EBS volume
    Type: Number
    Default: '100'
  ElbTargetSg:
    Description: 'Elb Target Security Group. [vpc.resources.ElbTargetSecGroup]'
    Type: String
  RabbitMqContainer:
    Description: Image of RabbitMQ.
    Type: String
    Default: 'rabbitmq:3-management'
  CwlUbuntuAgentDocker:
    Description: Name of cluster. This is used for discovery.
    Type: String
    Default: 'bitclouded/aws-cwl-agent:4.1'
  ContainerAwsUtil:
    Description: Container image for awscli and cfn-signal
    Type: String
    Default: 'bitclouded/aws-util:2-1'
  CwlLinuxParams:
    Description: Environment variables for syslog and authlog cwl group names
    Type: String
  CwlPolicy:
    Description: Managed policy for linux logging.
    Type: String
  RabbitCookie:
    Description: "The erlang cookie to propagate to all nodes in the cluster"
    Type: "String"
    MinLength: "10"
    MaxLength: "20"
    Default: "C00kiE1234!@#$"
    NoEcho: true
  RabbitDefaultUser:
    Description: "Default User"
    Type: "String"
    Default: "user"
  RabbitDefaultPassword:
    Description: "Default Password"
    ConstraintDescription: Non Special Characters allowed
    AllowedPattern: "[a-zA-Z0-9]*"
    Type: "String"
    MinLength: "6"
    MaxLength: "20"
    Default: "Password1234"
    NoEcho: true
Conditions:
  # IsThreeAz: !Not 
  #   - !Equals 
  #     - !Ref Subnet3Id
  #     - ''
  HasNoKeypair: !Equals 
    - !Ref KeyPairName
    - ''
Resources:
  RabbitMqSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: RabbitMq SecurityGroup
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: TCP
          CidrIp: 0.0.0.0/0
          FromPort: '1024'
          ToPort: '65535'
  RabbitMqGateway:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      Subnets: !Ref ElbSubnets
      Type: network
  RabbitMqbListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref RabbitMqTargetGroup
      LoadBalancerArn: !Ref RabbitMqGateway
      Port: 15672
      Protocol: TCP
  RabbitMqTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 10
      Port: 15672
      Protocol: TCP
      UnhealthyThresholdCount: 10
      VpcId: !Ref VpcId

  RabbitMqAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn: RabbitMqGateway
    Properties:
      MinSize: !Ref MinCount
      MaxSize: !Ref MaxCount
      DesiredCapacity: !Ref DesiredSize
      TargetGroupARNs: 
        - !Ref RabbitMqTargetGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Rabbit Mq'
          PropagateAtLaunch: 'true'
      VPCZoneIdentifier: !Ref ServerSubnets
      LaunchConfigurationName: !Ref RabbitMqLc
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
  RabbitMqLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn: RabbitMqGateway
    Properties:
      IamInstanceProfile: !Ref WebServersInstanceProfile
      ImageId: !Ref BcUbuntuBaseAmiId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref RabbitMqSecurityGroup
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      UserData: !Base64 
          'Fn::Sub': |
            #!/bin/bash
            ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            docker run --name rabbitmq -d --restart=always --net=host \
              -e RABBITMQ_ERLANG_COOKIE=${RabbitCookie} \
              -e RABBITMQ_DEFAULT_USER=${RabbitDefaultUser} \
              -e RABBITMQ_DEFAULT_PASS=${RabbitDefaultPassword} \
              -p 4369:4369 -p 5671-5672:5671-5671-5672 -p 25672:25672 -p 15672:15672 \
              ${RabbitMqContainer} 

            docker exec -t rabbitmq /bin/bash -c \
            "rabbitmq-plugins --offline enable rabbitmq_peer_discovery_aws; \
            echo \
            \"log.console.level=debug
            cluster_formation.peer_discovery_backend=rabbit_peer_discovery_aws
            cluster_formation.aws.region=${AWS::Region} 
            cluster_formation.aws.use_autoscaling_group=true  
            cluster_formation.aws.use_private_ip=true 
            \" >> /etc/rabbitmq/rabbitmq.conf; cat /etc/rabbitmq/rabbitmq.conf;
            rabbitmqctl stop_app; rabbitmqctl reset; rabbitmqctl start_app
            "
                         
            #docker run -t --rm ${ContainerAwsUtil} cfn-signal -e $? --stack ${AWS::StackName} --resource RabbitMqAsg --region ${AWS::Region}           
  RabbitMQRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: rabbitmq
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'autoscaling:DescribeAutoScalingInstances'
                  - 'ec2:DescribeInstances'
                Resource:
                  - '*'
              - Effect: Allow
                Action: 'ec2:DescribeInstances'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource:
                  - 'arn:aws:logs:*:*:*'
  WebServersInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /datastore/RabbitMq/
      Roles:
        - !Ref RabbitMQRole
Outputs:
  RabbitMqGateway:
    Value: !GetAtt 
      - RabbitMqGateway
      - DNSName
